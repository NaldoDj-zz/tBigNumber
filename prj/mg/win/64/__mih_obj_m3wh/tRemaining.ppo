#line 203 "D:\marinas-ide(64bits)\harbour\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 58 "D:\GitHub\core\contrib\xhb\xhb.ch"
   EXTERNAL xhb_Lib
#line 10 "D:\GitHub\tbigNumber\src\tRemaining.prg"
_HB_CLASS tRemaining ; function tRemaining ( ... ) ; STATIC s_oClass ; LOCAL nScope, oClass, oInstance ; IF s_oClass == NIL .AND. __clsLockDef( @s_oClass ) ; BEGIN SEQUENCE ; nScope := 1 ; ( ( nScope ) ) ; oClass := iif( .F.,, HBClass():new( "tRemaining", iif( .T., { @tTimeCalc() }, { @HBObject() } ), @tRemaining() ) ) ;


    nScope := 2; ( ( nScope ) )


; _HB_MEMBER { AS CHARACTER cMediumTime } ; oClass:AddMultiData( "CHARACTER", "00:00:00:000", 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cMediumTime"}, .F. )
; _HB_MEMBER { AS CHARACTER cEndTime } ; oClass:AddMultiData( "CHARACTER", "00:00:00", 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cEndTime"}, .F. )
; _HB_MEMBER { AS CHARACTER cStartTime } ; oClass:AddMultiData( "CHARACTER", "00:00:00", 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cStartTime"}, .F. )
; _HB_MEMBER { AS CHARACTER cTimeDiff } ; oClass:AddMultiData( "CHARACTER", "00:00:00", 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTimeDiff"}, .F. )
; _HB_MEMBER { AS CHARACTER cTRemaining } ; oClass:AddMultiData( "CHARACTER", "00:00:00", 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"cTRemaining"}, .F. )
; _HB_MEMBER { AS DATE dEndTime } ; oClass:AddMultiData( "DATE", Ctod("//"), 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dEndTime"}, .F. )
; _HB_MEMBER { AS DATE dStartTime } ; oClass:AddMultiData( "DATE", Ctod("//"), 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"dStartTime"}, .F. )
; _HB_MEMBER { AS NUMERIC nProgress } ; oClass:AddMultiData( "NUMERIC", 0, 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nProgress"}, .F. )
; _HB_MEMBER { AS NUMERIC nSRemaining } ; oClass:AddMultiData( "NUMERIC", 0, 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nSRemaining"}, .F. )
; _HB_MEMBER { AS NUMERIC nTotal } ; oClass:AddMultiData( "NUMERIC", 0, 4 + iif( .F., 16, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ), {"nTotal"}, .F. )


    nScope := 1 ; ( ( nScope ) )


    _HB_MEMBER New( nTotal) AS CLASS tRemaining; oClass:AddMethod( "New", @tRemaining_New(), nScope + iif( .T., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER ClassName(); oClass:AddMethod( "ClassName", @tRemaining_ClassName(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER SetRemaining( nTotal); oClass:AddMethod( "SetRemaining", @tRemaining_SetRemaining(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER Calcule( lProgress); oClass:AddMethod( "Calcule", @tRemaining_Calcule(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

    _HB_MEMBER GetcMediumTime(); oClass:AddMethod( "GetcMediumTime", @tRemaining_GetcMediumTime(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER GetcEndTime(); oClass:AddMethod( "GetcEndTime", @tRemaining_GetcEndTime(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER GetcStartTime(); oClass:AddMethod( "GetcStartTime", @tRemaining_GetcStartTime(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER GetcTimeDiff(); oClass:AddMethod( "GetcTimeDiff", @tRemaining_GetcTimeDiff(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER GetcTRemaining(); oClass:AddMethod( "GetcTRemaining", @tRemaining_GetcTRemaining(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER GetdEndTime(); oClass:AddMethod( "GetdEndTime", @tRemaining_GetdEndTime(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER GetdStartTime(); oClass:AddMethod( "GetdStartTime", @tRemaining_GetdStartTime(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER GetnProgress(); oClass:AddMethod( "GetnProgress", @tRemaining_GetnProgress(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER GetnSRemaining(); oClass:AddMethod( "GetnSRemaining", @tRemaining_GetnSRemaining(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )
    _HB_MEMBER GetnTotal(); oClass:AddMethod( "GetnTotal", @tRemaining_GetnTotal(), nScope + iif( .F., 8, 0 ) + iif( .F., 256, 0 ) + iif( .F., 2048, 0 ) )

oClass:Create() ; ; ALWAYS ; __clsUnlockDef( @s_oClass, oClass ) ; end ; oInstance := oClass:Instance() ; IF __objHasMsg( oInstance, "InitClass" ) ; oInstance:InitClass( ... ) ; END ; RETURN oInstance ; END ; RETURN s_oClass:Instance() AS CLASS tRemaining ;

static FUNCTION tRemaining_New(nTotal) ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining



    ::super:New()

    self:SetRemaining(@nTotal)
Return(self)

static FUNCTION tRemaining_ClassName() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return("TREMAINING")

static FUNCTION tRemaining_SetRemaining(nTotal) ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
    iif( nTotal == NIL , hb_Default(@nTotal,1) , )
    self:cMediumTime    := "00:00:00:000"
    self:cEndTime        := "00:00:00"
    self:cStartTime        := Time()
    self:cTimeDiff        := "00:00:00"
    self:cTRemaining    := "00:00:00"
    self:dEndTime        := CToD("//")
    self:dStartTime        := Date()
    self:nProgress        := 0
    self:nSRemaining    := 0
    self:nTotal            := nTotal
Return(self)

static FUNCTION tRemaining_Calcule(lProgress) ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining

    Local aEndTime

    Local cTime        := Time()
    Local dDate        := Date()

    Local nIncTime    := 0

    Local nTime
    Local nTimeEnd
    Local nTimeDiff
    Local nStartTime

    IF !(dDate==Self:dStartTime)
        nIncTime    := abs(dDate-self:dStartTime)
        nIncTime    *= 24
    EndIF

    nTime                := (self:TimeToSecs(cTime)+IF(nIncTime>0,self:HrsToSecs(nIncTime),0))
    nStartTime            := self:TimeToSecs(self:cStartTime)

    nTimeDiff            := abs(nTime-nStartTime)
    self:cTimeDiff        := self:SecsToTime(nTimeDiff)
    self:cTRemaining    := self:SecsToTime(abs(nTimeDiff-nStartTime))
    self:nSRemaining    := nTimeDiff

    iif( lProgress == NIL , hb_Default(@lProgress,.T.) , )
    IF (lProgress)
        ++self:nProgress
    EndIF

    self:cMediumTime        := self:MediumTime(self:cTimeDiff,self:nProgress,.T.)

    IF self:nTotal<self:nProgress
        nTimeEnd       := self:nTotal
        self:nTotal    := self:nProgress
        self:nProgress := nTimeEnd
    EndIF
    nTimeEnd := (((self:nTotal-self:nProgress)*self:nSRemaining)/self:nProgress)
    self:cEndTime            := self:SecsToTime(nTimeEnd)
    self:cEndTime            := self:IncTime(cTime,NIL,NIL,self:TimeToSecs(self:cEndTime))
    aEndTime                := self:Time2NextDay(self:cEndTime,dDate)
    self:cEndTime            := aEndTime[1]
    self:dEndTime            := aEndTime[2]

Return(self)

static FUNCTION tRemaining_GetcMediumTime() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:cMediumTime)

static FUNCTION tRemaining_GetcEndTime() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:cEndTime)

static FUNCTION tRemaining_GetcStartTime() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:cStartTime)

static FUNCTION tRemaining_GetcTimeDiff() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:cTimeDiff)

static FUNCTION tRemaining_GetcTRemaining() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:cTRemaining)

static FUNCTION tRemaining_GetdEndTime() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:dEndTime)

static FUNCTION tRemaining_GetdStartTime() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:dStartTime)

static FUNCTION tRemaining_GetnProgress() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:nProgress)

static FUNCTION tRemaining_GetnSRemaining() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:nSRemaining)

static FUNCTION tRemaining_GetnTotal() ; local Self AS CLASS tRemaining := QSelf() AS CLASS tRemaining
Return(self:nTotal)
