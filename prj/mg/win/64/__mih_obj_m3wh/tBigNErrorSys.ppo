#line 203 "D:\marinas-ide(64bits)\harbour\include\hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 58 "D:\GitHub\core\contrib\xhb\xhb.ch"
   EXTERNAL xhb_Lib
#line 50 "D:\GitHub\tbigNumber\src\tBigNErrorSys.prg"
Static __cErrorLogFile

Procedure ErrorSys




    ErrorBlock({|oError|DefError(oError)})








    tBNErrorSys()

Return

Procedure SetErrorLogFile(cFile)
    __cErrorLogFile := cFile
Return

Function GetErrorLogFile()
Return(__cErrorLogFile)

Function Build_Mode()
Return(IF(hb_mtvm()," (MT)","")+IF(Memory(1002)<>0," (FMSTAT)",""))

Static Function DefError(oError)

    Local cText
    Local cHtmText

    Local n
    Local nfHtmFile


    IF oError:genCode == 5 .AND. oError:canSubstitute
        Return(0)
    ENDIF


    IF oError:genCode == 41 .AND. oError:canRetry
        Return(.T.)
    ENDIF


    IF oError:genCode == 21 .AND. oError:osCode == 32 .AND. oError:canDefault
        NetErr(.T.)
        Return(.F.)
    ENDIF


    IF oError:genCode == 40 .AND. oError:canDefault
        NetErr(.T.)
        Return(.F.)
    ENDIF

      nfHtmFile    := Html_ErrorLog()
    cText         := ErrorMessage(oError)

    Html_LineText(nfHtmFile,'<p class="updated">Date: '+DToC(Date())+"  "+"Time: "+Time())
    Html_LineText(nfHtmFile,cText+"</p>")
    cText += hb_osNewLine()+hb_osNewLine()

    n := 1
    WHILE !Empty(ProcName(++n))
        cHtmText := "Called from "+ProcName(n)+"("+hb_ntos(ProcLine(n))+")" +hb_osNewLine()
        cText += cHtmText
        Html_LineText(nfHtmFile,cHtmText)
    ENDDO

    Html_Line(nfHtmFile)
    Html_End(nfHtmFile)

    hb_threadTerminateAll()

    Scroll() ; SetPos(0,0)
    QOut( cText )
    __Quit()

Return(.F.)

Static Function ErrorMessage(oError)


    Local cMessage := (IF(oError:severity>1,"Error","Warning")+" ")


    IF HB_ISSTRING(oError:subsystem)
        cMessage += oError:subsystem()
    ELSE
        cMessage += "???"
    ENDIF


    IF HB_ISNUMERIC(oError:subCode)
        cMessage += "/"+hb_ntos(oError:subCode)
    ELSE
        cMessage += "/???"
    ENDIF


    IF HB_ISSTRING(oError:description)
        cMessage += "  "+oError:description
    ENDIF


    DO CASE
    CASE !Empty(oError:filename)
        cMessage += ": "+oError:filename
    CASE !Empty(oError:operation)
        cMessage += ": "+oError:operation
    ENDCASE


    IF !Empty(oError:osCode)
        cMessage += " (DOS Error "+hb_ntos(oError:osCode)+")"
    ENDIF

Return(cMessage)

Static Function HTML_ERRORLOG()

    Local nfHtmFile
    Local cErrorLogFile := GetErrorLogFile()

    IF !File(cErrorLogFile)
        nfHtmFile := Html_Ini(cErrorLogFile,"Harbour tBigNumber Errorlog File")
        IF nfHtmFile>0
            Html_Line(nfHtmFile)
        ENDIF
      ELSE
        nfHtmFile := FOpen(cErrorLogFile,2)
        IF nfHtmFile>0
            FSeek(nfHtmFile,0,2)
        ENDIF
    ENDIF

Return(nfHtmFile)

Static Function HTML_INI(cFile,cTitle)

    Local nfHtmFile



























    Local cStyle  := "<style> "     + "body{ "                    + "font-family: sans-serif;"  + "background-color: #ffffff;"+ "font-size: 75%;"           + "color: #000000;"           + "}"                         + "h1{"                       + "font-family: sans-serif;"  + "font-size: 150%;"          + "color: #0000cc;"           + "font-weight: bold;"        + "background-color: #f0f0f0;"+ "}"                         + ".updated{"                 + "font-family: sans-serif;"  + "color: #cc0000;"           + "font-size: 110%;"          + "}"                         + ".normaltext{"              + "font-family: sans-serif;"  + "font-size: 100%;"          + "color: #000000;"           + "font-weight: normal;"      + "text-transform: none;"     + "text-decoration: none;"    + "}"                         + "</style>"
    nfHtmFile := FCreate(cFile)
    IF FError() <> 0
        Return(-1)
    ENDIF
    fWrite(nfHtmFile,"<HTML><HEAD><TITLE>"+cTitle+"</TITLE></HEAD>"+cStyle+"<BODY>"+Chr(13)+Chr(10))
    fWrite(nfHtmFile,"<H1 Align=Center>"+cTitle+"<br>"+GetHbVersion()+"</H1><BR>"+Chr(13)+Chr(10))
Return(nfHtmFile)

Static Procedure HTML_LINETEXT(nfHtmFile,cText)
    IF nfHtmFile>0
        fWrite(nfHtmFile,xhb_RTrim( cText )+"<BR>"+Chr(13)+Chr(10))
    ENDIF
Return

Static Procedure HTML_LINE(nfHtmFile)
    IF nfHtmFile>0
        fWrite(nfHtmFile,"<HR>"+Chr(13)+Chr(10))
    ENDIF
Return

Static Procedure HTML_END(nfHtmFile)
    IF nfHtmFile>0
        fWrite(nfHtmFile,"</BODY></HTML>")
        FClose(nfHtmFile)
    ENDIF
Return

Static Function GetHbVersion()
Return("tBigNumber :"+Version()+Build_Mode()+","+OS())
